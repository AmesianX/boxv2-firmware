Index: u-boot-2013.01/arch/arm/include/asm/io.h
===================================================================
--- u-boot-2013.01.orig/arch/arm/include/asm/io.h	2013-01-15 23:47:42.000000000 +0200
+++ u-boot-2013.01/arch/arm/include/asm/io.h	2016-11-11 06:40:03.169977200 +0200
@@ -75,42 +75,42 @@
 #define __arch_putw(v,a)		(*(volatile unsigned short *)(a) = (v))
 #define __arch_putl(v,a)		(*(volatile unsigned int *)(a) = (v))
 
-extern inline void __raw_writesb(unsigned int addr, const void *data, int bytelen)
+static inline void __raw_writesb(unsigned int addr, const void *data, int bytelen)
 {
 	uint8_t *buf = (uint8_t *)data;
 	while(bytelen--)
 		__arch_putb(*buf++, addr);
 }
 
-extern inline void __raw_writesw(unsigned int addr, const void *data, int wordlen)
+static inline void __raw_writesw(unsigned int addr, const void *data, int wordlen)
 {
 	uint16_t *buf = (uint16_t *)data;
 	while(wordlen--)
 		__arch_putw(*buf++, addr);
 }
 
-extern inline void __raw_writesl(unsigned int addr, const void *data, int longlen)
+static inline void __raw_writesl(unsigned int addr, const void *data, int longlen)
 {
 	uint32_t *buf = (uint32_t *)data;
 	while(longlen--)
 		__arch_putl(*buf++, addr);
 }
 
-extern inline void __raw_readsb(unsigned int addr, void *data, int bytelen)
+static inline void __raw_readsb(unsigned int addr, void *data, int bytelen)
 {
 	uint8_t *buf = (uint8_t *)data;
 	while(bytelen--)
 		*buf++ = __arch_getb(addr);
 }
 
-extern inline void __raw_readsw(unsigned int addr, void *data, int wordlen)
+static inline void __raw_readsw(unsigned int addr, void *data, int wordlen)
 {
 	uint16_t *buf = (uint16_t *)data;
 	while(wordlen--)
 		*buf++ = __arch_getw(addr);
 }
 
-extern inline void __raw_readsl(unsigned int addr, void *data, int longlen)
+static inline void __raw_readsl(unsigned int addr, void *data, int longlen)
 {
 	uint32_t *buf = (uint32_t *)data;
 	while(longlen--)
Index: u-boot-2013.01/include/linux/compiler-gcc6.h
===================================================================
--- /dev/null	1970-01-01 00:00:00.000000000 +0000
+++ u-boot-2013.01/include/linux/compiler-gcc6.h	2016-11-11 06:36:27.900980477 +0200
@@ -0,0 +1,61 @@
+#ifndef __LINUX_COMPILER_H
+#error "Please don't include <linux/compiler-gcc4.h> directly, include <linux/compiler.h> instead."
+#endif
+
+/* GCC 4.1.[01] miscompiles __weak */
+#ifdef __KERNEL__
+# if __GNUC_MINOR__ == 1 && __GNUC_PATCHLEVEL__ <= 1
+#  error Your version of gcc miscompiles the __weak directive
+# endif
+#endif
+
+#define __used			__attribute__((__used__))
+#define __must_check 		__attribute__((warn_unused_result))
+#define __compiler_offsetof(a,b) __builtin_offsetof(a,b)
+#define __always_inline		inline __attribute__((always_inline))
+
+/*
+ * A trick to suppress uninitialized variable warning without generating any
+ * code
+ */
+#define uninitialized_var(x) x = x
+
+#if __GNUC_MINOR__ >= 3
+/* Mark functions as cold. gcc will assume any path leading to a call
+   to them will be unlikely.  This means a lot of manual unlikely()s
+   are unnecessary now for any paths leading to the usual suspects
+   like BUG(), printk(), panic() etc. [but let's keep them for now for
+   older compilers]
+
+   Early snapshots of gcc 4.3 don't support this and we can't detect this
+   in the preprocessor, but we can live with this because they're unreleased.
+   Maketime probing would be overkill here.
+
+   gcc also has a __attribute__((__hot__)) to move hot functions into
+   a special section, but I don't see any sense in this right now in
+   the kernel context */
+#define __cold			__attribute__((__cold__))
+
+
+#if __GNUC_MINOR__ >= 5
+/*
+ * Mark a position in code as unreachable.  This can be used to
+ * suppress control flow warnings after asm blocks that transfer
+ * control elsewhere.
+ *
+ * Early snapshots of gcc 4.5 don't support this and we can't detect
+ * this in the preprocessor, but we can live with this because they're
+ * unreleased.  Really, we need to have autoconf for the kernel.
+ */
+#define unreachable() __builtin_unreachable()
+#endif
+
+#endif
+
+#if __GNUC_MINOR__ > 0
+#define __compiletime_object_size(obj) __builtin_object_size(obj, 0)
+#endif
+#if __GNUC_MINOR__ >= 4
+#define __compiletime_warning(message) __attribute__((warning(message)))
+#define __compiletime_error(message) __attribute__((error(message)))
+#endif
Index: u-boot-2013.01/arch/arm/lib/board.c
===================================================================
--- u-boot-2013.01.orig/arch/arm/lib/board.c	2013-01-15 23:47:42.000000000 +0200
+++ u-boot-2013.01/arch/arm/lib/board.c	2016-11-11 06:45:30.655513725 +0200
@@ -77,6 +77,7 @@
  ************************************************************************
  * May be supplied by boards if desired
  */
+/*
 inline void __coloured_LED_init(void) {}
 void coloured_LED_init(void)
 	__attribute__((weak, alias("__coloured_LED_init")));
@@ -96,6 +97,16 @@
 void blue_led_on(void) __attribute__((weak, alias("__blue_led_on")));
 inline void __blue_led_off(void) {}
 void blue_led_off(void) __attribute__((weak, alias("__blue_led_off")));
+*/
+__attribute__((weak)) extern void coloured_LED_init(void) {}
+__attribute__((weak)) extern void red_led_on(void) {}
+__attribute__((weak)) extern void red_led_off(void) {}
+__attribute__((weak)) extern void green_led_on(void) {}
+__attribute__((weak)) extern void green_led_off(void) {}
+__attribute__((weak)) extern void yellow_led_on(void) {}
+__attribute__((weak)) extern void yellow_led_off(void) {}
+__attribute__((weak)) extern void blue_led_on(void) {}
+__attribute__((weak)) extern void blue_led_off(void) {}
 
 /*
  ************************************************************************
Index: u-boot-2013.01/common/main.c
===================================================================
--- u-boot-2013.01.orig/common/main.c	2013-01-15 23:47:42.000000000 +0200
+++ u-boot-2013.01/common/main.c	2016-11-11 06:48:11.872273664 +0200
@@ -58,8 +58,11 @@
 /*
  * Board-specific Platform code can reimplement show_boot_progress () if needed
  */
+/*
 void inline __show_boot_progress (int val) {}
 void show_boot_progress (int val) __attribute__((weak, alias("__show_boot_progress")));
+*/
+__attribute__((weak)) extern void show_boot_progress(int val) {}
 
 #if defined(CONFIG_UPDATE_TFTP)
 int update_tftp (ulong addr);
