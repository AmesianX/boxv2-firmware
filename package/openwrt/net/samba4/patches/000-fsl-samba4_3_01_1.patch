diff --git a/lib/replace/replace.c b/lib/replace/replace.c
index e461471..3cfa557 100644
--- a/lib/replace/replace.c
+++ b/lib/replace/replace.c
@@ -402,9 +402,10 @@ int rep_mkstemp(char *template)
 {
 	/* have a reasonable go at emulating it. Hope that
 	   the system mktemp() isn't completely hopeless */
-	mktemp(template);
-	if (template[0] == 0)
-		return -1;
+        char *p = mktemp(template);
+        if (!p)
+                return -1;
+
 	return open(p, O_CREAT|O_EXCL|O_RDWR, 0600);
 }
 #endif
diff --git a/source3/Makefile.in b/source3/Makefile.in
index 759ee5a..ee91948 100644
--- a/source3/Makefile.in
+++ b/source3/Makefile.in
@@ -103,23 +103,23 @@ KRB5LIBS=@KRB5_LIBS@
 LDAP_LIBS=@LDAP_LIBS@
 NSCD_LIBS=@NSCD_LIBS@
 LIBWBCLIENT=@LIBWBCLIENT_STATIC@ @LIBWBCLIENT_SHARED@
-LIBWBCLIENT_LIBS=@LIBWBCLIENT_LIBS@
+LIBWBCLIENT_LIBS=@LIBWBCLIENT_STATIC@
 PTHREAD_LDFLAGS=@PTHREAD_LDFLAGS@
 PTHREAD_CFLAGS=@PTHREAD_CFLAGS@
 DNSSD_LIBS=@DNSSD_LIBS@
 AVAHI_LIBS=@AVAHI_LIBS@
 POPT_LIBS=@POPTLIBS@
 LIBTALLOC=@LIBTALLOC_STATIC@
-LIBTALLOC_LIBS=@LIBTALLOC_LIBS@
+LIBTALLOC_LIBS=@LIBTALLOC_STATIC@
 LIBREPLACE_LIBS=@LIBREPLACE_LIBS@
 LIBTDB=@LIBTDB_STATIC@
-LIBTDB_LIBS=@LIBTDB_LIBS@
+LIBTDB_LIBS=@LIBTDB_STATIC@
 TDB_DEPS=@TDB_DEPS@
 LIBNTDB=@LIBNTDB_STATIC@
 LIBNTDB_LIBS=@LIBNTDB_LIBS@
 NTDB_DEPS=@NTDB_DEPS@
 LIBNETAPI=@LIBNETAPI_STATIC@ @LIBNETAPI_SHARED@
-LIBNETAPI_LIBS=@LIBNETAPI_LIBS@
+LIBNETAPI_LIBS=@LIBNETAPI_STATIC@
 LIBSMBCLIENT_LIBS=@LIBSMBCLIENT_LIBS@
 LIBSMBSHAREMODES_LIBS=@LIBSMBSHAREMODES_LIBS@
 
@@ -208,7 +208,7 @@ PATH_FLAGS = -DSMB_PASSWD_FILE=\"$(SMB_PASSWD_FILE)\" \
 
 # Note that all executable programs now provide for an optional executable suffix.
 
-SBIN_PROGS = bin/smbd bin/nmbd @SWAT_SBIN_TARGETS@ @EXTRA_SBIN_PROGS@
+SBIN_PROGS = bin/samba_multicall bin/smbd bin/nmbd @SWAT_SBIN_TARGETS@ @EXTRA_SBIN_PROGS@
 
 BIN_PROGS1 = bin/smbclient bin/net bin/smbspool \
 	bin/testparm bin/smbstatus bin/smbget \
@@ -1073,7 +1073,7 @@ TEST_LP_LOAD_OBJ = param/test_lp_load.o \
 
 PASSWD_UTIL_OBJ = utils/passwd_util.o
 
-SMBPASSWD_OBJ = utils/smbpasswd.o $(PASSWD_UTIL_OBJ) $(PASSCHANGE_OBJ) \
+SMBPASSWD_OBJ = utils/owrt_smbpasswd.o $(PASSWD_UTIL_OBJ) $(PASSCHANGE_OBJ) \
 		$(PARAM_OBJ) $(LIBSMB_OBJ) $(PASSDB_OBJ) \
 		$(GROUPDB_OBJ) $(LIB_NONSMBD_OBJ) $(KRBCLIENT_OBJ) \
 		$(POPT_LIB_OBJ) $(SMBLDAP_OBJ) \
@@ -1853,6 +1853,42 @@ bin/.dummy:
 	  dir=bin $(MAKEDIR); fi
 	@: >> $@ || : > $@ # what a fancy emoticon!
 
+smbd/server_multicall.o: smbd/server.c smbd/server.o
+	@echo Compiling $<.c
+	@$(COMPILE_CC_PATH) -Dmain=smbd_main && exit 0;\
+		echo "The following command failed:" 1>&2;\
+		echo "$(COMPILE_CC_PATH)" 1>&2;\
+		$(COMPILE_CC_PATH) >/dev/null 2>&1
+
+nmbd/nmbd_multicall.o: nmbd/nmbd.c nmbd/nmbd.o
+	@echo Compiling $<.c
+	@$(COMPILE_CC_PATH) -Dmain=nmbd_main && exit 0;\
+		echo "The following command failed:" 1>&2;\
+		echo "$(COMPILE_CC_PATH)" 1>&2;\
+		$(COMPILE_CC_PATH) >/dev/null 2>&1
+
+utils/smbpasswd_multicall.o: utils/owrt_smbpasswd.c utils/owrt_smbpasswd.o
+	@echo Compiling $<.c
+	@$(COMPILE_CC_PATH) -Dmain=smbpasswd_main && exit 0;\
+		echo "The following command failed:" 1>&2;\
+		echo "$(COMPILE_CC_PATH)" 1>&2;\
+		$(COMPILE_CC_PATH) >/dev/null 2>&1
+
+SMBD_MULTI_O = $(patsubst smbd/server.o,smbd/server_multicall.o,$(SMBD_OBJ))
+NMBD_MULTI_O = $(patsubst nmbd/nmbd.o,nmbd/nmbd_multicall.o,$(filter-out $(LIB_DUMMY_OBJ),$(NMBD_OBJ)))
+SMBPASSWD_MULTI_O = $(patsubst utils/owrt_smbpasswd.o,utils/smbpasswd_multicall.o,$(filter-out $(LIB_DUMMY_OBJ),$(SMBPASSWD_OBJ)))
+MULTI_O = multi.o
+
+MULTICALL_O = $(sort $(SMBD_MULTI_O) $(NMBD_MULTI_O) $(SMBPASSWD_MULTI_O) $(MULTI_O))
+
+bin/samba_multicall: $(BINARY_PREREQS) $(MULTICALL_O) $(LIBTALLOC) $(LIBTDB) $(LIBWBCLIENT) @BUILD_POPT@
+	@echo Linking $@
+	@$(CC) -o $@ $(MULTICALL_O) $(LDFLAGS) $(LDAP_LIBS) @SMBD_FAM_LIBS@ \
+		$(KRB5LIBS) $(DYNEXP) $(PRINT_LIBS) $(AUTH_LIBS) \
+		$(ACL_LIBS) $(PASSDB_LIBS) $(LIBS) $(DNSSD_LIBS) $(AVAHI_LIBS) \
+		$(POPT_LIBS) @SMBD_LIBS@ $(LIBTALLOC_LIBS) $(LIBTDB_LIBS) \
+		$(LIBWBCLIENT_LIBS) $(ZLIB_LIBS)
+
 bin/smbd: $(BINARY_PREREQS) $(SMBD_OBJ) $(LIBTALLOC) $(LIBTDB) $(LIBWBCLIENT) @BUILD_POPT@
 	@echo Linking $@
 	@$(CC) -o $@ $(SMBD_OBJ) $(LDFLAGS) $(LDAP_LIBS) @SMBD_FAM_LIBS@ \
diff --git a/source3/configure b/source3/configure
index 14befa5..5d6ccaf 100755
--- a/source3/configure
+++ b/source3/configure
@@ -6849,10 +6849,8 @@ if ${samba_cv_big_endian+:} false; then :
 else
 
 if test "$cross_compiling" = yes; then :
-  { { $as_echo "$as_me:${as_lineno-$LINENO}: error: in \`$ac_pwd':" >&5
-$as_echo "$as_me: error: in \`$ac_pwd':" >&2;}
-as_fn_error $? "cannot run test program while cross compiling
-See \`config.log' for more details" "$LINENO" 5; }
+$as_echo "assuming we are not in big endian" >&2
+samba_cv_big_endian=no
 else
   cat confdefs.h - <<_ACEOF >conftest.$ac_ext
 /* end confdefs.h.  */
@@ -7194,10 +7192,8 @@ if ${samba_cv_little_endian+:} false; then :
 else
 
 if test "$cross_compiling" = yes; then :
-  { { $as_echo "$as_me:${as_lineno-$LINENO}: error: in \`$ac_pwd':" >&5
-$as_echo "$as_me: error: in \`$ac_pwd':" >&2;}
-as_fn_error $? "cannot run test program while cross compiling
-See \`config.log' for more details" "$LINENO" 5; }
+$as_echo "assuming we are in little endian" >&2
+samba_cv_little_endian=yes
 else
   cat confdefs.h - <<_ACEOF >conftest.$ac_ext
 /* end confdefs.h.  */
@@ -14382,10 +14378,7 @@ if test x"$libreplace_cv_HAVE_GETADDRINFO" = x"yes"; then
 	# see bug 5910, use our replacements if we detect
 	# a broken system.
 	if test "$cross_compiling" = yes; then :
-  { { $as_echo "$as_me:${as_lineno-$LINENO}: error: in \`$ac_pwd':" >&5
-$as_echo "$as_me: error: in \`$ac_pwd':" >&2;}
-as_fn_error $? "cannot run test program while cross compiling
-See \`config.log' for more details" "$LINENO" 5; }
+$as_echo "assuming valid getaddrinfo without bug 5910" >&2/5910/
 else
   cat confdefs.h - <<_ACEOF >conftest.$ac_ext
 /* end confdefs.h.  */
@@ -25070,7 +25063,7 @@ if ${samba_cv_SIZEOF_BLKCNT_T_4+:} false; then :
 else
 
 if test "$cross_compiling" = yes; then :
-  samba_cv_SIZEOF_BLKCNT_T_4=cross
+  samba_cv_SIZEOF_BLKCNT_T_4=yes
 else
   cat confdefs.h - <<_ACEOF >conftest.$ac_ext
 /* end confdefs.h.  */
@@ -25108,7 +25101,7 @@ if ${samba_cv_SIZEOF_BLKCNT_T_8+:} false; then :
 else
 
 if test "$cross_compiling" = yes; then :
-  samba_cv_SIZEOF_BLKCNT_T_8=cross
+  samba_cv_SIZEOF_BLKCNT_T_8=no
 else
   cat confdefs.h - <<_ACEOF >conftest.$ac_ext
 /* end confdefs.h.  */
diff --git a/source3/multi.c b/source3/multi.c
new file mode 100644
index 0000000..d12a3ef
--- /dev/null
+++ b/source3/multi.c
@@ -0,0 +1,35 @@
+#include <stdio.h>
+#include <string.h>
+
+extern int smbd_main(int argc, char **argv);
+extern int nmbd_main(int argc, char **argv);
+extern int smbpasswd_main(int argc, char **argv);
+
+static struct {
+	const char *name;
+	int (*func)(int argc, char **argv);
+} multicall[] = {
+	{ "smbd", smbd_main },
+	{ "nmbd", nmbd_main },
+	{ "smbpasswd", smbpasswd_main },
+};
+
+#define ARRAY_SIZE(a) (sizeof(a) / sizeof(a[0]))
+
+int main(int argc, char **argv)
+{
+	int i;
+
+	for (i = 0; i < ARRAY_SIZE(multicall); i++) {
+		if (strstr(argv[0], multicall[i].name))
+			return multicall[i].func(argc, argv);
+	}
+
+	fprintf(stderr, "Invalid multicall command, available commands:");
+	for (i = 0; i < ARRAY_SIZE(multicall); i++)
+		fprintf(stderr, " %s", multicall[i].name);
+
+	fprintf(stderr, "\n");
+
+	return 1;
+}
diff --git a/source3/utils/owrt_smbpasswd.c b/source3/utils/owrt_smbpasswd.c
new file mode 100644
index 0000000..863828a
--- /dev/null
+++ b/source3/utils/owrt_smbpasswd.c
@@ -0,0 +1,245 @@
+/*
+ * Copyright (C) 2012 Felix Fietkau <nbd@openwrt.org>
+ * Copyright (C) 2008 John Crispin <blogic@openwrt.org>
+ *
+ * This program is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License as published by the
+ * Free Software Foundation; either version 2 of the License, or (at your
+ * option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
+ * more details.
+ *
+ * You should have received a copy of the GNU General Public License along with
+ * this program; if not, write to the Free Software Foundation, Inc., 675
+ * Mass Ave, Cambridge, MA 02139, USA.  */
+
+#include "includes.h"
+#include <endian.h>
+#include <stdio.h>
+
+static char buf[256];
+
+static void md4hash(const char *passwd, uchar p16[16])
+{
+	int len;
+	smb_ucs2_t wpwd[129];
+	int i;
+
+	len = strlen(passwd);
+	for (i = 0; i < len; i++) {
+#if __BYTE_ORDER == __LITTLE_ENDIAN
+		wpwd[i] = (unsigned char)passwd[i];
+#else
+		wpwd[i] = (unsigned char)passwd[i] << 8;
+#endif
+	}
+	wpwd[i] = 0;
+
+	len = len * sizeof(int16);
+	mdfour(p16, (unsigned char *)wpwd, len);
+	ZERO_STRUCT(wpwd);
+}
+
+
+static bool find_passwd_line(FILE *fp, const char *user, char **next)
+{
+	char *p1;
+
+	while (!feof(fp)) {
+		if(!fgets(buf, sizeof(buf) - 1, fp))
+			continue;
+
+		p1 = strchr(buf, ':');
+
+		if (p1 - buf != strlen(user))
+			continue;
+
+		if (strncmp(buf, user, p1 - buf) != 0)
+			continue;
+
+		if (next)
+			*next = p1;
+		return true;
+	}
+	return false;
+}
+
+/* returns -1 if user is not present in /etc/passwd*/
+static int find_uid_for_user(const char *user)
+{
+	FILE *fp;
+	char *p1, *p2, *p3;
+	int ret = -1;
+
+	fp = fopen("/etc/passwd", "r");
+	if (!fp) {
+		printf("failed to open /etc/passwd");
+		goto out;
+	}
+
+	if (!find_passwd_line(fp, user, &p1)) {
+		printf("User %s not found or invalid in /etc/passwd\n");
+		goto out;
+	}
+
+	p2 = strchr(p1 + 1, ':');
+	if (!p2)
+		goto out;
+
+	p2++;
+	p3 = strchr(p2, ':');
+	if (!p1)
+		goto out;
+
+	*p3 = '\0';
+	ret = atoi(p2);
+
+out:
+	if(fp)
+		fclose(fp);
+	return ret;
+}
+
+static void smbpasswd_write_user(FILE *fp, const char *user, int uid, const char *password)
+{
+	static uchar nt_p16[NT_HASH_LEN];
+	int len = 0;
+	int i;
+
+	md4hash(strdup(password), nt_p16);
+
+	len += snprintf(buf + len, sizeof(buf) - len, "%s:%u:XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX:", user, uid);
+	for(i = 0; i < NT_HASH_LEN; i++)
+		len += snprintf(buf + len, sizeof(buf) - len, "%02X", nt_p16[i]);
+
+	snprintf(buf + len, sizeof(buf) - len, ":[U          ]:LCT-00000001:\n");
+	fputs(buf, fp);
+}
+
+static void smbpasswd_delete_user(FILE *fp)
+{
+	fpos_t r_pos, w_pos;
+	int len = strlen(buf);
+
+	fgetpos(fp, &r_pos);
+	w_pos = r_pos;
+	w_pos.__pos -= len;
+
+	while (fgets(buf, sizeof(buf) - 1, fp)) {
+		int cur_len = strlen(buf);
+
+		fsetpos(fp, &w_pos);
+		fputs(buf, fp);
+		r_pos.__pos += cur_len;
+		w_pos.__pos += cur_len;
+		fsetpos(fp, &r_pos);
+	}
+
+	ftruncate(fileno(fp), w_pos.__pos);
+}
+
+static int usage(const char *progname)
+{
+	fprintf(stderr,
+		"Usage: %s [options] <username>\n"
+		"\n"
+		"Options:\n"
+		"  -s		read password from stdin\n"
+		"  -a		add user\n"
+		"  -x		delete user\n",
+		progname);
+	return 1;
+}
+
+int main(int argc, char **argv)
+{
+	const char *prog = argv[0];
+	const char *user;
+	char *pw1, *pw2;
+	FILE *fp;
+	bool add = false, delete = false, get_stdin = false, found;
+	int ch;
+	int uid;
+
+	TALLOC_CTX *frame = talloc_stackframe();
+
+	while ((ch = getopt(argc, argv, "asx")) != EOF) {
+		switch (ch) {
+		case 's':
+			get_stdin = true;
+			break;
+		case 'a':
+			add = true;
+			break;
+		case 'x':
+			delete = true;
+			break;
+		default:
+			return usage(prog);
+		}
+	}
+
+	if (add && delete)
+		return usage(prog);
+
+	argc -= optind;
+	argv += optind;
+
+	if (!argc)
+		return usage(prog);
+
+	user = argv[0];
+	if (!delete) {
+		uid = find_uid_for_user(user);
+		if (uid < 0) {
+			fprintf(stderr, "Could not find user '%s' in /etc/passwd\n", user);
+			return 2;
+		}
+	}
+
+	fp = fopen("/etc/samba/smbpasswd", "r+");
+	if(!fp) {
+		fprintf(stderr, "Failed to open /etc/samba/smbpasswd");
+		return 3;
+	}
+
+	found = find_passwd_line(fp, user, NULL);
+	if (!add && !found) {
+		fprintf(stderr, "Could not find user '%s' in /etc/samba/smbpasswd\n", user);
+		return 3;
+	}
+
+	if (delete) {
+		smbpasswd_delete_user(fp);
+		goto out;
+	}
+
+	pw1 = get_pass("New SMB password:", get_stdin);
+	if (!pw1)
+		pw1 = strdup("");
+
+	pw2 = get_pass("Retype SMB password:", get_stdin);
+	if (!pw2)
+		pw2 = strdup("");
+
+	if (strcmp(pw1, pw2) != 0) {
+		fprintf(stderr, "Mismatch - password unchanged.\n");
+		goto out_free;
+	}
+
+	if (found)
+		fseek(fp, -strlen(buf), SEEK_CUR);
+	smbpasswd_write_user(fp, user, uid, pw2);
+
+out_free:
+	free(pw1);
+	free(pw2);
+out:
+	fclose(fp);
+	TALLOC_FREE(frame);
+
+	return 0;
+}
